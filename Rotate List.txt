/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    
    int size(ListNode* head){
        int n=0;
        while(head!=NULL){
            n++;
            head =head->next;
        }
        return n;
    }
    public : ListNode* rotateRight(ListNode* head, int k) {
        if(head==NULL) return head;
        int n = size(head);  
        int loop = k%n;
        loop = n-loop;
        
        if(n==1 || n==loop) return head;
        
        ListNode* temp= head;   //1
        ListNode* firstAddress = head;  //1
         int j=0;
        while(temp!=NULL){
            j++;           //1//2//3
            if(j==loop){
                firstAddress= temp->next; //4
                temp->next = NULL;         //3=null
                break;
            } 
            temp = temp->next;    //2//3
        }
        temp= firstAddress;      // temp=4
        while(temp->next!=NULL){   //false 5->null
            temp = temp -> next;
        }
        
        temp->next= head;            //4->5 = head(5)
        return firstAddress;        //5
        
        }
    
};