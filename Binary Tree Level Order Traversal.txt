/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// class Solution {
//     public List<List<Integer>> levelOrder(TreeNode root) {
//         List<List<Integer>> ans;
//         Queue<Node> q=new PriorityQueue<Node>();  
//         if(root==null) return ans;
//         q.push(root);
//         while(1){
//             int size = q.size();
//             if(size==0) return ans;
//             List<Integer> data;
//             while(size>0){
//                 Node temp= q.front();
//                 q.pop();
//                 data.add(temp.val);
//                 if(temp.left!=null)
//                     q.push(temp.left);
//                 if(temp.right!=null)
//                     q.push(temp.right);
//                 size--;
//             }
//             ans.add(data);
//         }
//         return ans;
//     }
// }
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        
        if (root == null) {
            return result;
        }
        
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        
        while (!queue.isEmpty()) {
            int levelSize = queue.size();
            List<Integer> level = new ArrayList<>();
            
            for (int i = 0; i < levelSize; i++) {
                TreeNode node = queue.poll();
                level.add(node.val);
                
                if (node.left != null) {
                    queue.offer(node.left);
                }
                
                if (node.right != null) {
                    queue.offer(node.right);
                }                
            }    
            
            result.add(level);
        }
        
        return result;
    }
}