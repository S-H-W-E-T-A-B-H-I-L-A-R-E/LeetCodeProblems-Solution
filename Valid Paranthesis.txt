
Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.









class Solution {
  public boolean isValid(String str) {
        Stack<Character> s = new Stack();
       
        for(int i=0; i <str.length(); i++){
            
            char curr= str.charAt(i);
            
            if(isOpening(curr)){
                s.push(curr);
            }else if(s.isEmpty()){
                return false;
            }
            else if(! isMatching(s.peek() , curr)){
                return false;
            }else{
                s.pop();
            }
        }
        return s.isEmpty();
    }
    
    boolean isOpening(char curr){
        return curr == '(' || curr== '{' || curr== '[';
    }
    boolean isMatching(char a, char b){
        return (a == '(' && b== ')') || (a == '{' && b== '}') || (a == '[' && b== ']');
    }
}